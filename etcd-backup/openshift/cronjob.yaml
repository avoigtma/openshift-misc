kind: CronJob
apiVersion: batch/v1
metadata:
  name: cronjob-etcd-backup
  namespace: etcd-backup
  labels:
    app.kubernetes.io/name: cronjob-etcd-backup
spec:
  schedule: "0 0-23/6 * * *"
  concurrencyPolicy: Forbid
  suspend: false
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: cronjob-etcd-backup
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app.kubernetes.io/name: cronjob-etcd-backup
        spec:
          nodeSelector:
            node-role.kubernetes.io/control-plane: ''
          restartPolicy: Never
          activeDeadlineSeconds: 500
          serviceAccountName: cronjob-etcd-backup
          hostPID: true
          hostNetwork: true
          enableServiceLinks: true
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          securityContext: {}
          containers:
            - name: cronjob-etcd-backup
              # image: registry.redhat.io/openshift4/ose-cli
              # image: registry.redhat.io/ubi9
              image: image-registry.openshift-image-registry.svc:5000/etcd-backup/ubi9sshclient:latest
              terminationMessagePath: /dev/termination-log
              command:
              - /bin/bash
              - '-c'
              - |
                #/bin/bash
                ## create local backup
                echo -e '\n\n---\nCreate etcd backup local to master\n'
                TS=$(date "+%F_%H%M%S")
                chroot /host /usr/local/bin/cluster-backup.sh /home/core/backup/$TS
                ## create tar of backup directory and remove backup dir
                chroot /host tar -zcf /home/core/backup/$TS.tgz /home/core/backup/$TS
                chroot /host rm -fr /home/core/backup/$TS
                ## copy backup to backup sink
                echo -e '\n\n---\nCopy backup to backup target\n'
                # cp or scp/sftp
                echo "TODO: replace this line with copy command ....."
                KEYFILE=/info/backup-credentials/ssh-key
                BACKUP_TARGET_HOST=$(cat /info/backup-target/backup-target-hostname)
                BACKUP_TARGET_USER=$(cat /info/backup-target/backup-target-user)
                # create backup dir for cluster
                echo ssh -i $KEYFILE $BACKUP_TARGET_USER@$BACKUP_TARGET_HOST mkdir ~/etcd-backup/$CLUSTERNAME
                echo scp -i $KEYFILE /home/core/backup/$TS.tgz $BACKUP_TARGET_USER@$BACKUP_TARGET_HOST:~/etcd-backup/$CLUSTERNAME/.
                ## cleanup old backups
                echo -e '\n\n---\nCleanup old local etcd backups\n'
                echo -e '\nRemoving ...'
                chroot /host find /home/core/backup/ -type f -mmin +"2"
                chroot /host find /home/core/backup/ -type f -mmin +"2" -delete 
              env:
                - name: CLUSTERNAME
                  valueFrom:
                    configMapKeyRef:
                      name: clustername
                      key: clustername
              securityContext:
                privileged: true
                runAsUser: 0
                capabilities:
                  add:
                    - SYS_CHROOT
              imagePullPolicy: Always
              volumeMounts:
                - name: host
                  mountPath: /host
                - name: backuptarget
                  mountPath: /info/backup-target
                - name: target-secret
                  mountPath: /info/backup-credentials
                  readOnly: true
              terminationMessagePolicy: File
          volumes:
          - name: host
            hostPath:
              path: /
              type: Directory
          - name: backuptarget
            configMap:
              name: backup-target
          - name: target-secret
            secret:
              secretName: target-credentials
              key: ssh-key
              defaultMode: 0400
          dnsPolicy: ClusterFirst
          tolerations:
          - key: node-role.kubernetes.io/control-plane
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 5
